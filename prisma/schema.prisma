// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  STANDARDIZATION
}

enum DocumentStatus {
  DRAFTED
  SUBMITTED
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum ActivityType {
  LOGIN
  LOGOUT
  UPLOAD
  DOWNLOAD
  DELETE
  EDIT
  APPROVE
  REJECT
}

model User {
  id            String         @id @default(cuid())
  email         String        @unique
  name          String?
  password      String
  role          Role          @default(STANDARDIZATION)
  image         String?
  isActive      Boolean       @default(true)
  lastLogin     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  documents     Document[]    // Documents created by the user
  approvals     Approval[]    // Document approvals made by the user
  revisions     DocumentRevision[] // Document revisions made by the user
  notifications Notification[]
  loginAttempts LoginAttempt[]
  activities    UserActivity[]

  @@index([email])
  @@index([role])
}

// prisma/schema.prisma
model Document {
  id          String         @id @default(cuid())
  title       String
  description String        @db.Text
  filePath    String
  fileType    String?       @default("application/pdf")
  fileSize    Int?          @default(0)
  version     Int           @default(1)
  status      DocumentStatus @default(DRAFTED)
  
  uploadedAt  DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String
  approvals   Approval[]
  revisions   DocumentRevision[]

  @@index([status])
  @@index([creatorId])
  @@index([uploadedAt])
  @@index([title])
}

model Approval {
  id         String         @id @default(cuid())
  status     DocumentStatus
  comment    String?       @db.Text
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  document   Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  approver   User         @relation(fields: [approverId], references: [id])
  approverId String

  @@index([documentId])
  @@index([approverId])
  @@index([status])
}

model DocumentRevision {
  id          String   @id @default(cuid())
  version     Int
  oldFilePath String?  // Path to previous version file
  newFilePath String   // Path to new version file
  comment     String?  @db.Text
  createdAt   DateTime @default(now())

  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  editor      User     @relation(fields: [editorId], references: [id])
  editorId    String

  @@index([documentId])
  @@index([editorId])
}

model Notification {
  id        String          @id @default(cuid())
  message   String         @db.Text
  type      NotificationType @default(INFO)
  relatedId String?        // ID of related document or approval
  read      Boolean        @default(false)
  createdAt DateTime       @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model LoginAttempt {
  id           String    @id @default(cuid())
  success      Boolean
  ipAddress    String?
  userAgent    String?
  errorMessage String?   @db.Text
  createdAt    DateTime  @default(now())

  // Relations
  user         User      @relation(fields: [userId], references: [id])
  userId       String

  @@index([userId])
  @@index([createdAt])
  @@index([success])
}

model UserActivity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String?      @db.Text
  createdAt   DateTime     @default(now())

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model SystemSettings {
  id                Int      @id @default(1)
  backupFrequency   String
  retentionPeriod   Int
  emailNotifications Boolean
  systemMaintenanceMode Boolean
  maxFileSize       Int
  allowedFileTypes  String[]
  autoApprovalTimeout Int
  passwordPolicy    Json
  updatedAt         DateTime @updatedAt
}